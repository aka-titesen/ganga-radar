version: "3.8"

services:
  # ===================================
  # DATABASE SERVICES
  # ===================================

  postgres:
    image: postgres:15-alpine
    container_name: ganga-radar-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ganga_radar_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_MULTIPLE_DATABASES: ganga_radar_dev,ganga_radar_test
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    networks:
      - ganga-radar-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ganga_radar_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ganga-radar-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ganga-radar-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ===================================
  # APPLICATION SERVICES
  # ===================================

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ganga-radar-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ganga_radar_dev
      - REDIS_URL=redis://redis:6379
      - PORT=3001
      - FRONTEND_URL=http://localhost:3000
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - ganga-radar-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ganga-radar-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:3001
      - VITE_APP_NAME=Ganga Radar
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - ganga-radar-network
    depends_on:
      - backend
    command: npm run dev

  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile.dev
    container_name: ganga-radar-scraper
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ganga_radar_dev
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
    volumes:
      - ./scraper:/app
      - scraper_downloads:/app/downloads
    networks:
      - ganga-radar-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python main.py

  # ===================================
  # AUTOMATION & TOOLS
  # ===================================

  n8n:
    image: n8nio/n8n:latest
    container_name: ganga-radar-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=ganga_radar_dev
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=password
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - WEBHOOK_URL=http://localhost:5678
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - ganga-radar-network
    depends_on:
      postgres:
        condition: service_healthy

# ===================================
# NETWORKS
# ===================================
networks:
  ganga-radar-network:
    driver: bridge

# ===================================
# VOLUMES
# ===================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local
  scraper_downloads:
    driver: local
